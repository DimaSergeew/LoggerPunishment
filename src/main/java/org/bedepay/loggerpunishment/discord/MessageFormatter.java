package org.bedepay.loggerpunishment.discord;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.MessageEmbed;
import org.bedepay.loggerpunishment.LoggerPunishment;
import org.bedepay.loggerpunishment.config.ConfigManager;
import org.bedepay.loggerpunishment.model.ModeratorData;
import org.bedepay.loggerpunishment.model.PlayerData;
import org.bedepay.loggerpunishment.model.PunishmentData;
import org.bedepay.loggerpunishment.model.PunishmentType;
import org.bedepay.loggerpunishment.model.UnbanType;
import org.bedepay.loggerpunishment.util.TimeFormatter;

import java.awt.Color;
import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Discord embed —Å–æ–æ–±—â–µ–Ω–∏–π
 */
public class MessageFormatter {
    
    private final LoggerPunishment plugin;
    private final ConfigManager configManager;
    
    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss")
            .withZone(ZoneId.systemDefault());
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è embed'–æ–≤
    private static final String SERVER_ICON_URL = "https://mc-heads.net/avatar/steve/64";
    private static final String PLAYER_AVATAR_BASE_URL = "https://mc-heads.net/avatar/";
    
    public MessageFormatter(LoggerPunishment plugin) {
        this.plugin = plugin;
        this.configManager = plugin.getConfigManager();
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å embed –¥–ª—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è
     */
    public MessageEmbed createPunishmentEmbed(PunishmentData punishment) {
        EmbedBuilder builder = new EmbedBuilder();
        ConfigManager.DiscordConfig discord = configManager.getDiscordConfig();
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ü–≤–µ—Ç
        String typeKey = punishment.getType().name().toLowerCase();
        String title = discord.punishmentTitles.getOrDefault(typeKey, punishment.getType().getDisplayName());
        Color color = discord.colors.getOrDefault(typeKey, Color.RED);
        String emoji = discord.emojis.getOrDefault(typeKey, punishment.getType().getEmoji());
        
        builder.setTitle(emoji + " " + title);
        builder.setColor(color);
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        builder.addField(
            discord.emojis.getOrDefault("player", "üë§") + " –ò–≥—Ä–æ–∫",
            punishment.getPlayerName() + "\n`" + punishment.getPlayerUuid() + "`",
            true
        );
        
        builder.addField(
            discord.emojis.getOrDefault("moderator", "üëÆ") + " –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", 
            punishment.getModeratorName() != null ? punishment.getModeratorName() : "–°–∏—Å—Ç–µ–º–∞",
            true
        );
        
        // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        String durationText;
        if (punishment.isPermanent()) {
            durationText = "–ù–∞–≤—Å–µ–≥–¥–∞";
        } else {
            durationText = TimeFormatter.formatDuration(punishment.getDuration());
            if (punishment.getExpiresAt() != null) {
                durationText += "\n–ò—Å—Ç–µ–∫–∞–µ—Ç: " + TimeFormatter.formatDateTime(punishment.getExpiresAt());
            }
        }
        
        builder.addField(
            discord.emojis.getOrDefault("duration", "‚è∞") + " –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            durationText,
            true
        );
        
        // –ü—Ä–∏—á–∏–Ω–∞
        builder.addField(
            discord.emojis.getOrDefault("reason", "üìù") + " –ü—Ä–∏—á–∏–Ω–∞",
            punishment.getReason(),
            false
        );
        
        // ID –Ω–∞–∫–∞–∑–∞–Ω–∏—è
        if (punishment.getPunishmentId() != null) {
            builder.addField(
                discord.emojis.getOrDefault("id", "üÜî") + " ID",
                "`" + punishment.getPunishmentId() + "`",
                true
            );
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è jail
        if (punishment.getType() == PunishmentType.JAIL && punishment.getJailName() != null) {
            builder.addField("üè¢ –¢—é—Ä—å–º–∞", punishment.getJailName(), true);
        }
        
        // –°—Ç–∞—Ç—É—Å
        String status = punishment.isActive() ? 
            discord.emojis.getOrDefault("active", "üî¥") + " –ê–∫—Ç–∏–≤–Ω–æ" :
            discord.emojis.getOrDefault("expired", "‚ö™") + " –ù–µ–∞–∫—Ç–∏–≤–Ω–æ";
        builder.addField("–°—Ç–∞—Ç—É—Å", status, true);
        
        // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        builder.setTimestamp(punishment.getCreatedAt());
        builder.setFooter("–°–æ–∑–¥–∞–Ω–æ");
        
        return builder.build();
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å embed –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞
     */
    public MessageEmbed createUnbanEmbed(PunishmentData punishment) {
        EmbedBuilder builder = new EmbedBuilder();
        ConfigManager.DiscordConfig discord = configManager.getDiscordConfig();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞–∑–±–∞–Ω–∞
        String unbanKey = "unban";
        if (punishment.getType() == PunishmentType.MUTE) {
            unbanKey = "unmute";
        } else if (punishment.getType() == PunishmentType.JAIL) {
            unbanKey = "unjail";
        }
        
        String title = discord.unbanTitles.getOrDefault(unbanKey, "–°–Ω—è—Ç–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è");
        Color color = discord.colors.getOrDefault("unban", Color.GREEN);
        String emoji = discord.emojis.getOrDefault("unban", "‚úÖ");
        
        builder.setTitle(emoji + " " + title);
        builder.setColor(color);
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        builder.addField(
            discord.emojis.getOrDefault("player", "üë§") + " –ò–≥—Ä–æ–∫",
            punishment.getPlayerName(),
            true
        );
        
        builder.addField(
            discord.emojis.getOrDefault("moderator", "üëÆ") + " –°–Ω—è–ª",
            punishment.getUnbanModeratorName() != null ? punishment.getUnbanModeratorName() : "–°–∏—Å—Ç–µ–º–∞",
            true
        );
        
        // –¢–∏–ø —Å–Ω—è—Ç–∏—è
        if (punishment.getUnbanType() != null) {
            builder.addField(
                "–¢–∏–ø —Å–Ω—è—Ç–∏—è",
                punishment.getUnbanType().getEmoji() + " " + punishment.getUnbanType().getDisplayName(),
                true
            );
        }
        
        // –ü—Ä–∏—á–∏–Ω–∞ —Å–Ω—è—Ç–∏—è
        if (punishment.getUnbanReason() != null && !punishment.getUnbanReason().isEmpty()) {
            builder.addField(
                discord.emojis.getOrDefault("reason", "üìù") + " –ü—Ä–∏—á–∏–Ω–∞ —Å–Ω—è—Ç–∏—è",
                punishment.getUnbanReason(),
                false
            );
        }
        
        // –í—Ä–µ–º—è —Å–Ω—è—Ç–∏—è
        if (punishment.getUnbannedAt() != null) {
            builder.setTimestamp(punishment.getUnbannedAt());
            builder.setFooter("–°–Ω—è—Ç–æ");
        }
        
        return builder.build();
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å embed –¥–ª—è –ª–æ–≥ –∫–∞–Ω–∞–ª–∞
     */
    public MessageEmbed createLogEmbed(PunishmentData punishment) {
        EmbedBuilder builder = new EmbedBuilder();
        ConfigManager.DiscordConfig discord = configManager.getDiscordConfig();
        
        String typeKey = punishment.getType().name().toLowerCase();
        String title = discord.punishmentTitles.getOrDefault(typeKey, punishment.getType().getDisplayName());
        Color color = discord.colors.getOrDefault(typeKey, Color.ORANGE);
        String emoji = discord.emojis.getOrDefault(typeKey, punishment.getType().getEmoji());
        
        builder.setTitle(emoji + " " + title);
        builder.setColor(color);
        
        // –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ
        StringBuilder info = new StringBuilder();
        info.append("**–ò–≥—Ä–æ–∫:** ").append(punishment.getPlayerName()).append("\n");
        info.append("**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** ").append(punishment.getModeratorName() != null ? punishment.getModeratorName() : "–°–∏—Å—Ç–µ–º–∞").append("\n");
        
        if (!punishment.isPermanent()) {
            info.append("**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ").append(TimeFormatter.formatDuration(punishment.getDuration())).append("\n");
        } else {
            info.append("**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** –ù–∞–≤—Å–µ–≥–¥–∞\n");
        }
        
        info.append("**–ü—Ä–∏—á–∏–Ω–∞:** ").append(punishment.getReason());
        
        if (punishment.getPunishmentId() != null) {
            info.append("\n**ID:** `").append(punishment.getPunishmentId()).append("`");
        }
        
        builder.setDescription(info.toString());
        builder.setTimestamp(punishment.getCreatedAt());
        
        return builder.build();
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å embed —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
     */
    public MessageEmbed createPlayerStatsEmbed(String playerName, String playerUuid, 
                                             Map<PunishmentType, Integer> totalCounts,
                                             Map<PunishmentType, Integer> activeCounts,
                                             List<PunishmentData> activePunishments) {
        EmbedBuilder builder = new EmbedBuilder();
        ConfigManager.DiscordConfig discord = configManager.getDiscordConfig();
        
        builder.setTitle(discord.emojis.getOrDefault("stats", "üìä") + " –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞: " + playerName);
        builder.setColor(discord.colors.getOrDefault("info", Color.BLUE));
        
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        StringBuilder totalStats = new StringBuilder();
        int totalPunishments = totalCounts.values().stream().mapToInt(Integer::intValue).sum();
        totalStats.append("**–í—Å–µ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–π:** ").append(totalPunishments).append("\n");
        
        for (PunishmentType type : PunishmentType.values()) {
            int count = totalCounts.getOrDefault(type, 0);
            if (count > 0) {
                totalStats.append(type.getEmoji()).append(" ").append(type.getDisplayName()).append(": ").append(count).append("\n");
            }
        }
        
        builder.addField("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", totalStats.toString(), true);
        
        // –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è
        StringBuilder activeStats = new StringBuilder();
        int totalActive = activeCounts.values().stream().mapToInt(Integer::intValue).sum();
        activeStats.append("**–ê–∫—Ç–∏–≤–Ω—ã—Ö:** ").append(totalActive).append("\n");
        
        for (PunishmentType type : PunishmentType.values()) {
            int count = activeCounts.getOrDefault(type, 0);
            if (count > 0) {
                activeStats.append(type.getEmoji()).append(" ").append(type.getDisplayName()).append(": ").append(count).append("\n");
            }
        }
        
        builder.addField("–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è", activeStats.toString(), true);
        
        // –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∫–∞–∑–∞–Ω–∏–π
        if (!activePunishments.isEmpty()) {
            StringBuilder details = new StringBuilder();
            for (PunishmentData punishment : activePunishments) {
                details.append(punishment.getType().getEmoji()).append(" ");
                if (punishment.isPermanent()) {
                    details.append("–ù–∞–≤—Å–µ–≥–¥–∞");
                } else {
                    details.append(TimeFormatter.formatTimeLeft(punishment.getExpiresAt()));
                }
                details.append(" - ").append(punishment.getReason()).append("\n");
            }
            
            if (details.length() > 1024) {
                details.setLength(1021);
                details.append("...");
            }
            
            builder.addField("–î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∫–∞–∑–∞–Ω–∏–π", details.toString(), false);
        }
        
        builder.addField("UUID", "`" + playerUuid + "`", false);
        builder.setTimestamp(Instant.now());
        builder.setFooter("–û–±–Ω–æ–≤–ª–µ–Ω–æ");
        
        return builder.build();
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å embed —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
     */
    public MessageEmbed createModeratorStatsEmbed(String moderatorName, String moderatorUuid,
                                                Map<PunishmentType, Integer> issuedCounts,
                                                int totalIssued, int activeIssued) {
        EmbedBuilder builder = new EmbedBuilder();
        ConfigManager.DiscordConfig discord = configManager.getDiscordConfig();
        
        builder.setTitle(discord.emojis.getOrDefault("stats", "üìä") + " –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: " + moderatorName);
        builder.setColor(discord.colors.getOrDefault("info", Color.BLUE));
        
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        StringBuilder totalStats = new StringBuilder();
        totalStats.append("**–í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ:** ").append(totalIssued).append("\n");
        totalStats.append("**–ê–∫—Ç–∏–≤–Ω—ã—Ö:** ").append(activeIssued).append("\n");
        
        builder.addField("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", totalStats.toString(), true);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        StringBuilder typeStats = new StringBuilder();
        for (PunishmentType type : PunishmentType.values()) {
            int count = issuedCounts.getOrDefault(type, 0);
            if (count > 0) {
                typeStats.append(type.getEmoji()).append(" ").append(type.getDisplayName()).append(": ").append(count).append("\n");
            }
        }
        
        if (typeStats.length() == 0) {
            typeStats.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");
        }
        
        builder.addField("–ü–æ —Ç–∏–ø–∞–º –Ω–∞–∫–∞–∑–∞–Ω–∏–π", typeStats.toString(), true);
        
        builder.addField("UUID", "`" + moderatorUuid + "`", false);
        builder.setTimestamp(Instant.now());
        builder.setFooter("–û–±–Ω–æ–≤–ª–µ–Ω–æ");
        
        return builder.build();
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å embed —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
     */
    public MessageEmbed createNoDiscordLinkEmbed(String playerName, String playerUuid, 
                                               PunishmentType punishmentType, String moderatorName) {
        EmbedBuilder builder = new EmbedBuilder();
        ConfigManager.DiscordConfig discord = configManager.getDiscordConfig();
        
        builder.setTitle("üîó –ò–≥—Ä–æ–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª Discord –∞–∫–∫–∞—É–Ω—Ç");
        builder.setColor(discord.colors.getOrDefault("info", Color.ORANGE));
        
        String template = discord.noDiscordLinkTemplate;
        if (template != null && !template.isEmpty()) {
            String description = template
                .replace("{player_name}", playerName)
                .replace("{player_uuid}", playerUuid)
                .replace("{punishment_type}", punishmentType.getDisplayName())
                .replace("{moderator_name}", moderatorName != null ? moderatorName : "–°–∏—Å—Ç–µ–º–∞");
            
            builder.setDescription(description);
        } else {
            // Fallback –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            builder.addField("üë§ –ò–≥—Ä–æ–∫", playerName + "\n`" + playerUuid + "`", true);
            builder.addField("üö´ –¢–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è", punishmentType.getDisplayName(), true);
            builder.addField("üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", moderatorName != null ? moderatorName : "–°–∏—Å—Ç–µ–º–∞", true);
            builder.setDescription("–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Discord –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
        }
        
        builder.setTimestamp(Instant.now());
        
        return builder.build();
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ –∏–≥—Ä–æ–∫–æ–≤
     */
    public MessageEmbed createPlayerNotification(PunishmentData punishment) {
        return createPunishmentEmbed(punishment);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
     */
    public MessageEmbed createModeratorNotification(PunishmentData punishment) {
        return createPunishmentEmbed(punishment);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤
     */
    public MessageEmbed createLogNotification(PunishmentData punishment) {
        return createLogEmbed(punishment);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
     */
    public MessageEmbed createUnbanPlayerNotification(PunishmentData punishment) {
        return createUnbanEmbed(punishment);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
     */
    public MessageEmbed createUnbanModeratorNotification(PunishmentData punishment) {
        return createUnbanEmbed(punishment);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –ª–æ–≥–æ–≤
     */
    public MessageEmbed createUnbanLogNotification(PunishmentData punishment) {
        return createLogEmbed(punishment);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    public MessageEmbed createUpdatedNotification(PunishmentData punishment) {
        if (punishment.isActive()) {
            return createPunishmentEmbed(punishment);
        } else {
            return createUnbanEmbed(punishment);
        }
    }
    
    // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å URL –∞–≤–∞—Ç–∞—Ä–∞ –∏–≥—Ä–æ–∫–∞
     */
    private String getPlayerAvatarUrl(String playerUuid) {
        if (playerUuid == null || playerUuid.isEmpty()) {
            return PLAYER_AVATAR_BASE_URL + "steve/64";
        }
        return PLAYER_AVATAR_BASE_URL + playerUuid.replace("-", "") + "/64";
    }
} 