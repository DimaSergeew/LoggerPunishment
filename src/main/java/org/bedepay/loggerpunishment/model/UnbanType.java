package org.bedepay.loggerpunishment.model;

/**
 * –¢–∏–ø—ã —Å–Ω—è—Ç–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π
 */
public enum UnbanType {
    MANUAL("manual", "–†—É—á–Ω–æ–µ —Å–Ω—è—Ç–∏–µ", "üëÆ"),
    AUTOMATIC("automatic", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ", "‚è∞"),
    EXPIRED("expired", "–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è", "‚åõ");
    
    private final String code;
    private final String displayName;
    private final String emoji;
    
    UnbanType(String code, String displayName, String emoji) {
        this.code = code;
        this.displayName = displayName;
        this.emoji = emoji;
    }
    
    public String getCode() {
        return code;
    }
    
    public String getDisplayName() {
        return displayName;
    }
    
    public String getEmoji() {
        return emoji;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —Å–Ω—è—Ç–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è –ø–æ –∫–æ–¥—É
     */
    public static UnbanType fromCode(String code) {
        for (UnbanType type : values()) {
            if (type.code.equalsIgnoreCase(code)) {
                return type;
            }
        }
        return MANUAL; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Ä—É—á–Ω—ã–º
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–Ω—è—Ç–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏—á–∏–Ω—ã
     */
    public static UnbanType determineFromReason(String reason) {
        if (reason == null || reason.trim().isEmpty()) {
            return EXPIRED;
        }
        
        String lowerReason = reason.toLowerCase();
        if (lowerReason.contains("expired") || lowerReason.contains("–∏—Å—Ç–µ–∫")) {
            return EXPIRED;
        }
        
        if (lowerReason.contains("automatic") || lowerReason.contains("–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")) {
            return AUTOMATIC;
        }
        
        return MANUAL;
    }
} 