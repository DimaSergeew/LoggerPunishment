package org.bedepay.loggerpunishment.model;

/**
 * –¢–∏–ø—ã –Ω–∞–∫–∞–∑–∞–Ω–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞–≥–∏–Ω–æ–º
 */
public enum PunishmentType {
    BAN("ban", "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞", "üö´"),
    MUTE("mute", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Ç–∞", "üîá"),
    KICK("kick", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞", "üë¢"),
    JAIL("jail", "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç—é—Ä—å–º—É", "üè¢");
    
    private final String code;
    private final String displayName;
    private final String emoji;
    
    PunishmentType(String code, String displayName, String emoji) {
        this.code = code;
        this.displayName = displayName;
        this.emoji = emoji;
    }
    
    public String getCode() {
        return code;
    }
    
    public String getDisplayName() {
        return displayName;
    }
    
    public String getEmoji() {
        return emoji;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è –ø–æ –∫–æ–¥—É
     */
    public static PunishmentType fromCode(String code) {
        for (PunishmentType type : values()) {
            if (type.code.equalsIgnoreCase(code)) {
                return type;
            }
        }
        throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è: " + code);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º
     */
    public boolean canBeTemporary() {
        return this == BAN || this == MUTE || this == JAIL;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –±—ã—Ç—å —Å–Ω—è—Ç–æ
     */
    public boolean canBeRevoked() {
        return this == BAN || this == MUTE || this == JAIL;
    }
} 